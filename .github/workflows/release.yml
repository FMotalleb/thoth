name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

  build_and_release:
    name: Build and Release
    needs: create_release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: thoth-cli
            asset_name: thoth-cli-linux-amd64
          - os: ubuntu-latest
            artifact_name: thoth-cli
            asset_name: thoth-cli-linux-x86
            target: i686-unknown-linux-gnu
          - os: macos-latest
            artifact_name: thoth-cli
            asset_name: thoth-cli-macos-x86_64
          - os: macos-latest
            artifact_name: thoth-cli
            asset_name: thoth-cli-macos-arm64
            target: aarch64-apple-darwin
    steps:
    - uses: actions/checkout@v2
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
    
    - name: Install x86 dependencies
      if: matrix.target == 'i686-unknown-linux-gnu'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y gcc-multilib
      
    - name: Build
      run: |
        if [ "${{ matrix.target }}" != "" ]; then
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}
        else
          cargo build --release
        fi
      shell: bash
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ matrix.target != '' && format('./target/{0}/release/{1}', matrix.target, matrix.artifact_name) || format('./target/release/{0}', matrix.artifact_name) }}
        tag_name: v${{ github.event.inputs.version }}

  publish_to_cargo:
    name: Publish to Cargo
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Update Cargo.lock
        run: |
          cargo update
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add Cargo.lock
          git commit -m "Update Cargo.lock" || echo "No changes to commit"
      
      - name: Verify Cargo Token
        run: |
          if [ -z "${{ secrets.CARGO_REGISTRY_TOKEN }}" ]; then
            echo "CARGO_REGISTRY_TOKEN is not set"
            exit 1
          else
            echo "CARGO_REGISTRY_TOKEN is set"
          fi
      
      - name: Publish to Cargo
        run: |
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --verbose || {
            echo "Cargo publish failed. Checking package status..."
            cargo package --list
            exit 1
          }
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
